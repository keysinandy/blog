const n=JSON.parse('{"key":"v-630b1597","path":"/articles/leetcode/424.%E6%9B%BF%E6%8D%A2%E5%90%8E%E7%9A%84%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6.html","title":"替换后的最长重复字符","lang":"zh-CN","frontmatter":{"title":"替换后的最长重复字符","cover":"https://pic.imgdb.cn/item/64b7d29e1ddac507cc41f3ac.jpg","icon":"page","order":5,"author":"积木","date":"2023-07-19T00:00:00.000Z","tag":["leetcode slidingwindow"],"sticky":true,"description":"题目: 424.替换后的最长重复字符 给你一个字符串 s 和一个整数 k 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 k 次。 在执行上述操作后，返回包含相同字母的最长子字符串的长度。 解题思路 /* * @lc app=leetcode.cn id=424 lang=typescript * * [424] 替换后的最长重复字符 */ // @lc code=start function characterReplacement(s: string, k: number): number { let left = 0; let right = 0; let maxLen = 0; const map = new Map(); while (right &lt; s.length) { if (map.get(s[right])) { map.set(s[right], map.get(s[right]) + 1); } else { map.set(s[right], 1); } right++; let mostNum = 1; for (const [_, value] of map) { if (value &gt; mostNum) { mostNum = value; } } const shouldShrink = () =&gt; right - left - mostNum &gt; k; while (left &lt; right &amp;&amp; shouldShrink()) { map.set(s[left], map.get(s[left]) - 1); left++; } if (right - left &gt; maxLen) { maxLen = right - left; } } return maxLen; } // @lc code=end // @lc code=end","head":[["meta",{"property":"og:url","content":"https://github.com/keysinandy/blog/articles/leetcode/424.%E6%9B%BF%E6%8D%A2%E5%90%8E%E7%9A%84%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"替换后的最长重复字符"}],["meta",{"property":"og:description","content":"题目: 424.替换后的最长重复字符 给你一个字符串 s 和一个整数 k 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 k 次。 在执行上述操作后，返回包含相同字母的最长子字符串的长度。 解题思路 /* * @lc app=leetcode.cn id=424 lang=typescript * * [424] 替换后的最长重复字符 */ // @lc code=start function characterReplacement(s: string, k: number): number { let left = 0; let right = 0; let maxLen = 0; const map = new Map(); while (right &lt; s.length) { if (map.get(s[right])) { map.set(s[right], map.get(s[right]) + 1); } else { map.set(s[right], 1); } right++; let mostNum = 1; for (const [_, value] of map) { if (value &gt; mostNum) { mostNum = value; } } const shouldShrink = () =&gt; right - left - mostNum &gt; k; while (left &lt; right &amp;&amp; shouldShrink()) { map.set(s[left], map.get(s[left]) - 1); left++; } if (right - left &gt; maxLen) { maxLen = right - left; } } return maxLen; } // @lc code=end // @lc code=end"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.imgdb.cn/item/64b7d29e1ddac507cc41f3ac.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-31T11:31:52.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"替换后的最长重复字符"}],["meta",{"property":"article:author","content":"积木"}],["meta",{"property":"article:tag","content":"leetcode slidingwindow"}],["meta",{"property":"article:published_time","content":"2023-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-31T11:31:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"替换后的最长重复字符\\",\\"image\\":[\\"https://pic.imgdb.cn/item/64b7d29e1ddac507cc41f3ac.jpg\\"],\\"datePublished\\":\\"2023-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-31T11:31:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"积木\\"}]}"]]},"headers":[{"level":3,"title":"题目: 424.替换后的最长重复字符","slug":"题目-424-替换后的最长重复字符","link":"#题目-424-替换后的最长重复字符","children":[]},{"level":3,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]}],"git":{"createdTime":1689773892000,"updatedTime":1690803112000,"contributors":[{"name":"keysin","email":"keysinandy@outlook.com","commits":2}]},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"articles/leetcode/424.替换后的最长重复字符.md","localizedDate":"2023年7月19日","excerpt":"<h3> 题目: 424.替换后的最长重复字符</h3>\\n<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 <code>k</code> 次。</p>\\n<p>在执行上述操作后，返回包含相同字母的最长子字符串的长度。</p>\\n<h3> 解题思路</h3>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code>\\n<span class=\\"token comment\\">/*\\n * @lc app=leetcode.cn id=424 lang=typescript\\n *\\n * [424] 替换后的最长重复字符\\n */</span>\\n\\n<span class=\\"token comment\\">// @lc code=start</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">characterReplacement</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> k<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> left <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> right <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> maxLen <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> map <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>right <span class=\\"token operator\\">&lt;</span> s<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n      map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>right<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    right<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> mostNum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>_<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">of</span> map<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>value <span class=\\"token operator\\">&gt;</span> mostNum<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        mostNum <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">shouldShrink</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> right <span class=\\"token operator\\">-</span> left <span class=\\"token operator\\">-</span> mostNum <span class=\\"token operator\\">&gt;</span> k<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">&lt;</span> right <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">shouldShrink</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>left<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">[</span>left<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      left<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>right <span class=\\"token operator\\">-</span> left <span class=\\"token operator\\">&gt;</span> maxLen<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      maxLen <span class=\\"token operator\\">=</span> right <span class=\\"token operator\\">-</span> left<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">return</span> maxLen<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// @lc code=end</span>\\n\\n<span class=\\"token comment\\">// @lc code=end</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
