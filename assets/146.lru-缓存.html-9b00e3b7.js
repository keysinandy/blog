const e=JSON.parse('{"key":"v-38842504","path":"/articles/leetcode/146.lru-%E7%BC%93%E5%AD%98.html","title":"lru-缓存","lang":"zh-CN","frontmatter":{"title":"lru-缓存","cover":"https://pic.imgdb.cn/item/64c798d91ddac507ccd1a386.jpg","icon":"page","order":1,"author":"积木","date":"2023-07-31T00:00:00.000Z","tag":["leetcode design"],"sticky":true,"description":"题目: 146.lru-缓存 请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。 实现 LRUCache 类： LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。","head":[["meta",{"property":"og:url","content":"https://github.com/keysinandy/blog/articles/leetcode/146.lru-%E7%BC%93%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"lru-缓存"}],["meta",{"property":"og:description","content":"题目: 146.lru-缓存 请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。 实现 LRUCache 类： LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.imgdb.cn/item/64c798d91ddac507ccd1a386.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-31T11:31:52.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"lru-缓存"}],["meta",{"property":"article:author","content":"积木"}],["meta",{"property":"article:tag","content":"leetcode design"}],["meta",{"property":"article:published_time","content":"2023-07-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-31T11:31:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lru-缓存\\",\\"image\\":[\\"https://pic.imgdb.cn/item/64c798d91ddac507ccd1a386.jpg\\"],\\"datePublished\\":\\"2023-07-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-31T11:31:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"积木\\"}]}"]]},"headers":[{"level":3,"title":"题目: 146.lru-缓存","slug":"题目-146-lru-缓存","link":"#题目-146-lru-缓存","children":[]},{"level":3,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]}],"git":{"createdTime":1690803112000,"updatedTime":1690803112000,"contributors":[{"name":"keysin","email":"keysinandy@outlook.com","commits":1}]},"readingTime":{"minutes":1.39,"words":417},"filePathRelative":"articles/leetcode/146.lru-缓存.md","localizedDate":"2023年7月31日","excerpt":"<h3> 题目: 146.lru-缓存</h3>\\n<p>请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。</p>\\n<p>实现 LRUCache 类：</p>\\n<ul>\\n<li>LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存</li>\\n<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>\\n<li>void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。</li>\\n</ul>","autoDesc":true}');export{e as data};
