import{_ as p,X as t,Y as o,Z as s,$ as n,a0 as c,a1 as a,E as i}from"./framework-23afdf50.js";const l={},d=a(`<h3 id="git-diff-算法解析" tabindex="-1"><a class="header-anchor" href="#git-diff-算法解析" aria-hidden="true">#</a> Git Diff 算法解析</h3><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><p>在日常编码时，大家都会使用版本控制系统，比如说<code>Git</code>。我们在提交代码的时候会看这次提交的修改内容，在合并代码时会看两个分支的不同。这种两份代码进行对比的情况我们称之为<code>diff</code>。<code>diff</code>是<code>Git</code>版本控制的核心。</p><p><code>diff</code>的目的是比较两份代码的不同，这里的不同可以分为增与删。举个例子，在我们查看一个<code>commit</code>的时候，我们会关注一个代码块的删除、一个表达式的删除、一个函数的新增，而不太会关注那些没有改变的代码。因此，<code>diff</code>最重要的是展示删除、增加的部分。</p><h3 id="diff的几个要素" tabindex="-1"><a class="header-anchor" href="#diff的几个要素" aria-hidden="true">#</a> diff的几个要素</h3><h4 id="我们的关心点" tabindex="-1"><a class="header-anchor" href="#我们的关心点" aria-hidden="true">#</a> 我们的关心点</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;ABC&#39;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&#39;BCD&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们通过一系列的编辑使<code>str1</code>转化为<code>str2</code>。</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span><span class="token prefix deleted">-</span><span class="token line"> B
</span><span class="token prefix deleted">-</span><span class="token line"> C
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> B
</span><span class="token prefix inserted">+</span><span class="token line"> C
</span><span class="token prefix inserted">+</span><span class="token line"> D
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>diff</code>很暴力，直接将旧的字符串全部删除，同时添加了所有的新字符串。然而这个方法是不恰当的，因为我们关心的是哪些被删除了，哪些被修改了，哪些是增加的。我们其实不怎么关心那些不变的代码。下面则展现了一个良好的<code>diff</code></p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> B
</span><span class="token prefix unchanged"> </span><span class="token line"> C
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> D
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="最少的步数" tabindex="-1"><a class="header-anchor" href="#最少的步数" aria-hidden="true">#</a> 最少的步数</h4><p>看一个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;ABCDA&#39;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&#39;CBACD&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这两个字符串，我们可以简单的做个<code>diff</code></p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> C
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> B
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> C
</span><span class="token prefix deleted">-</span><span class="token line"> D
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> A
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> C
</span><span class="token prefix inserted">+</span><span class="token line"> D
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们观察了一会之后，可以发现修改次数更少的<code>diff</code>，例如：</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> C
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> B
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> A
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> C
</span><span class="token prefix unchanged"> </span><span class="token line"> D
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> C
</span><span class="token prefix inserted">+</span><span class="token line"> B
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> A
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> B
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> C
</span><span class="token prefix unchanged"> </span><span class="token line"> D
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比于之前的那种，这两个<code>diff</code>用了更少的步骤，我们肯定是趋向于更少的<code>diff</code>步骤的。我们需要用最少的步骤来达到<code>diff</code>的目的。</p><p>但是这又产生了一个问题，比如上面两个<code>diff</code>，都用了最少的步骤，然而我们只会选择其中一种。</p><h4 id="优先删除-其次增加" tabindex="-1"><a class="header-anchor" href="#优先删除-其次增加" aria-hidden="true">#</a> 优先删除，其次增加</h4><p>看一个极端点的例子，有个例子能有助于我们理解为什么要优先删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;ABC&#39;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&#39;DEF&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面有三种<code>diff</code>方案</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> D
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> B
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> E
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> C
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> F
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> D
</span><span class="token prefix inserted">+</span><span class="token line"> E
</span><span class="token prefix inserted">+</span><span class="token line"> F
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span><span class="token prefix deleted">-</span><span class="token line"> B
</span><span class="token prefix deleted">-</span><span class="token line"> C
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> A
</span><span class="token prefix deleted">-</span><span class="token line"> B
</span><span class="token prefix deleted">-</span><span class="token line"> C
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> D
</span><span class="token prefix inserted">+</span><span class="token line"> E
</span><span class="token prefix inserted">+</span><span class="token line"> F
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三种<code>diff</code>都是可行的，但是如果让我们选择一种显示给我们看，我们肯定选择第三种</p><ul><li><p>第一种的缺点是缺乏<strong>连贯性</strong>，本应该连续删除的和连续增加的没有在一起显示让人看的不明所以，看的非常累</p></li><li><p>第二种的缺点是顺序颠倒了，我们的阅读意识是从上往下看，从阅读顺序来看，上面的是“过去的”，下面的是“现在的”，与之对应的是<code>diff</code>就是上面的是“过去删除的&quot;，下面的是”现在增加的”，像第三种一样，这样就不会产生一种违和感</p></li></ul><h4 id="尽量保持不变" tabindex="-1"><a class="header-anchor" href="#尽量保持不变" aria-hidden="true">#</a> 尽量保持不变</h4><p>我们经常会遇到这种情况，我们会在一个代码片段中插入一段代码。这段代码的结构会和上下相似，看下面这个例子</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>function foo(bar) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> switch (bar) {
</span><span class="token prefix unchanged"> </span><span class="token line">   case 1:
</span><span class="token prefix unchanged"> </span><span class="token line">     break;
</span><span class="token prefix unchanged"> </span><span class="token line">   default:
</span><span class="token prefix unchanged"> </span><span class="token line">     break;
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么看比较直观，看下面这个函数，如果我们需要增加一种<code>case 2</code>的情况，下面两种情况选择一种，会怎么选</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>function foo(bar) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> switch (bar) {
</span><span class="token prefix unchanged"> </span><span class="token line">   case 1:
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     break;
</span><span class="token prefix inserted">+</span><span class="token line">   case 2:
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     break;
</span><span class="token prefix unchanged"> </span><span class="token line">   default:
</span><span class="token prefix unchanged"> </span><span class="token line">     break;
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>function foo(bar) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> switch (bar) {
</span><span class="token prefix unchanged"> </span><span class="token line">   case 1:
</span><span class="token prefix unchanged"> </span><span class="token line">    break;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   case 2:
</span><span class="token prefix inserted">+</span><span class="token line">    break;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   default:
</span><span class="token prefix unchanged"> </span><span class="token line">     break;
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们肯定会选择第二种<code>diff</code>方式，因为他能更加直观的表现出新增<code>case 2</code>的情况，如果我们把这一次<code>diff</code>分为3部分，一部分是前面的<strong>不变</strong>部分，<strong>中间</strong>的增加部分，<strong>后面</strong>的不变部分，在<code>diff</code>时，我们更倾向于保持这些不变的部分。</p>`,37),r=s("strong",null,"Eugene W. Myers",-1),k=s("strong",null,"最短编辑路径",-1),u={href:"http://www.xmailserver.org/diff2.pdf",target:"_blank",rel:"noopener noreferrer"},v=a(`<h3 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h3><p>接下来就是介绍这个算法，<code>Myers</code>将这种寻找最短编辑路径的方法用图来解决，我们可以建一张图来表示<code>diff</code>的过程</p><p>接下来用两个字符串做例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;ABCABBA&#39;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&#39;CBABAC&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个字符串转化成为图是这样的</p><figure><img src="https://pic2.imgdb.cn/item/6449207f0d2dde57772b7722.png" alt="将字符串的diff转化为图" tabindex="0" loading="lazy"><figcaption>将字符串的diff转化为图</figcaption></figure><h4 id="一-步" tabindex="-1"><a class="header-anchor" href="#一-步" aria-hidden="true">#</a> 一“步”</h4><p>我们用<strong>x轴</strong>来代表旧的字符串，用<strong>y轴</strong>来代表新的字符串，原点的坐标值是**（0，0）<strong>，当我们向左移动一步时，坐标变为</strong>(1,0)<strong>，这代表着旧字符串</strong>str1的字符A被删除了**，当我们从原点向下移动，从坐标**（0，0）<strong>变为</strong>（1，0）<strong>，这代表着</strong>增加了新字符串的C**。这种坐标的改变我们称为移动，一次移动之能向右一步或者向下一步，从图中我们可以看到，从原点到终点右下角最多的步数就是字符串<code>str1</code>的长度加上字符串<code>str2</code>的长度。</p><h4 id="走斜线" tabindex="-1"><a class="header-anchor" href="#走斜线" aria-hidden="true">#</a> 走斜线</h4><p>除了向右移动或者向下移动，我们还可以选择向斜右下方移动，当起点与终点对应经过的x与y相等时，就可以进行一次斜线的移动，这样的移动不是一步，而是被包含在一步之内，走斜线就代表着那些不用做修改的内容，所以说，对于修改步数来说，走斜线是没有<strong>代价</strong>的。这也意味着我们能走斜线就走斜线，能走多远就走多远。</p><figure><img src="https://pic2.imgdb.cn/item/644926a20d2dde577736c282.png" alt="走斜线" tabindex="0" loading="lazy"><figcaption>走斜线</figcaption></figure><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h4><p>接来下，我们肉身对这个图进行一次广度优先遍历，先从<strong>0,0</strong>开始，有两种选择<strong>1,0</strong>或者<strong>0,1</strong>,接来下分别对<strong>1,0</strong>、<strong>0,1</strong>进行遍历</p><figure><img src="https://pic2.imgdb.cn/item/644a5aac0d2dde5777c7316e.png" alt="step1" tabindex="0" loading="lazy"><figcaption>step1</figcaption></figure><figure><img src="https://pic2.imgdb.cn/item/644a5ac30d2dde5777c74ca8.png" alt="step2" tabindex="0" loading="lazy"><figcaption>step2</figcaption></figure><figure><img src="https://pic2.imgdb.cn/item/644a5ac80d2dde5777c753aa.png" alt="step3" tabindex="0" loading="lazy"><figcaption>step3</figcaption></figure><figure><img src="https://pic2.imgdb.cn/item/644a5ac80d2dde5777c753d5.png" alt="step4" tabindex="0" loading="lazy"><figcaption>step4</figcaption></figure><figure><img src="https://pic2.imgdb.cn/item/644a5ac80d2dde5777c753f6.png" alt="step5" tabindex="0" loading="lazy"><figcaption>step5</figcaption></figure><p>把上面的过程做成一张坐标图可以得到 <img src="https://pic2.imgdb.cn/item/644a5e4d0d2dde5777ccc570.png" alt="坐标图" loading="lazy"></p><p>把上面的图逆时间转45度 <img src="https://pic2.imgdb.cn/item/644a5e000d2dde5777cc49b0.png" alt="坐标图" loading="lazy"></p><h4 id="明确几个概念" tabindex="-1"><a class="header-anchor" href="#明确几个概念" aria-hidden="true">#</a> 明确几个概念</h4><p>我们把每一步称之为<code>d</code>，一步可以是向x轴右方或者y轴下方移动一个坐标并且如果可以进行斜线移动的话再进行斜线移动。</p><p>我们再设立一个<code>k</code>，<code>k = x - y</code>， 如果把<code>d</code>理解为<code>diff</code>的深度，<code>k</code>可以理解为向<code>x</code>方向或者<code>y</code>方向偏移的深度</p><figure><img src="https://pic2.imgdb.cn/item/644a5c0c0d2dde5777c8d2f0.png" alt="K线图" tabindex="0" loading="lazy"><figcaption>K线图</figcaption></figure><p>那么这个<code>k</code>值有什么用呢，<code>k</code>其实是与<code>d</code>相对应的，上面提到了一次<code>d</code>是向右或者向下移动一步，那么在<code>d</code>步时，<code>k</code>值的区间在<code>-k ~ k</code>之间（走斜线并不会改变<code>k</code>值）。同时对于奇数的<code>d</code>，<code>k</code>值必定是奇数，对于偶数的<code>d</code>，<code>k</code>值必定是偶数。</p><p>将之前的过程加上<code>d</code>和<code>k</code>就是这样的</p><figure><img src="https://pic2.imgdb.cn/item/644a5ee00d2dde5777ce415a.png" alt="组合图" tabindex="0" loading="lazy"><figcaption>组合图</figcaption></figure><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><p>现在我们通过代码来实现<code>diff</code>过程，算法的过程大致是这样的，我们通过从<code>0,0</code>点出发遍历,每一次遍历就是一&#39;步&#39;。从上一个点来得到下一个点的坐标，假如这个坐标是终点，那么停止遍历。</p><p>我们将<code>str1</code>、<code>str2</code>转化为两个字符串数组<code>from</code>、<code>to</code>，<code>from</code>代表修改之前的代码、<code>to</code>代表修改之后的代码，数组的每一项相当于代码的每一行。</p><p>并且我们通过求得<code>from</code>的长度<code>n</code>，<code>to</code>的长度<code>m</code>，来计算出最多需要走<code>d = n + m</code>步。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">diff</span> <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> from<span class="token punctuation">.</span>length
  	<span class="token keyword">const</span> m <span class="token operator">=</span> to<span class="token punctuation">.</span>length
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前我们得出一个结论：对于第<code>d</code>步，<code>k</code>总是分布在<code>-d ~ +d</code>之间，并且<code>k</code>的奇偶性与<code>d</code>相同，此时我们可以较为精确的得出在第<code>d</code>步时，<code>k</code>的分布。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">diff</span> <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> from<span class="token punctuation">.</span>length
  	<span class="token keyword">const</span> m <span class="token operator">=</span> to<span class="token punctuation">.</span>length
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token operator">-</span>d<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// k将被限制在这里</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要通过上一步的坐标来得出这一步的坐标，因此我们需要一个<code>map</code>来保存上一步的坐标。我们通过设置<code>v[k] = x</code>来保存坐标，因为<code>k</code>的定义是<code>x-y</code>，我们通过保存<code>k</code>值与<code>x</code>值也就变相保存了<code>x,y</code>坐标。同时我们还需保存每一步的所有坐标<code>vs[d] = v</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">V</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>k<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Vs</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>d<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">V</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">diff</span> <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> from<span class="token punctuation">.</span>length
  	<span class="token keyword">const</span> m <span class="token operator">=</span> to<span class="token punctuation">.</span>length
    <span class="token keyword">const</span> v<span class="token operator">:</span> <span class="token constant">V</span>  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// v[k] = x</span>
    <span class="token comment">// x - y = k</span>
    <span class="token comment">// 这个是初始值，因为我们从0,0开始，0,0这个坐标也需要从上一个坐标推导出来，因此我们设置了一个虚拟坐标（0，-1）</span>
    v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">const</span> vs<span class="token operator">:</span> Vs <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">0</span><span class="token operator">:</span> v
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token operator">-</span>d<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// k将被限制在这里</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么如何从这一步的起始坐标推导至当前坐标呢，对于当前坐标而言，我们已经知道了当前的<code>k</code>值与起始的坐标，上面我们已经讲过，每一步的都会使<code>k</code>值<code>+1</code>或者<code>-1</code>。也就是说，当前<code>k</code>值的坐标可能会对应两个个起始的坐标，我们需要得出一个最优解。我们之前说过<code>diff</code>的策略有一点：优先删除，其次增加。也就是说优先选择两个起始坐标<code>x</code>值较大的那个。</p><p>我们可以通过上面的思路，先求出起始坐标的<code>kPrev</code>，再通过<code>vs</code>取得起始坐标</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> isDown <span class="token operator">=</span> k <span class="token operator">==</span> <span class="token operator">-</span>d <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> d <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> kPrev <span class="token operator">=</span> isDown <span class="token operator">?</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> k <span class="token operator">-</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个是状态转移的核心，我们逐步分析，首先我们先判断是否向下走，假如向下走，那么<code>kPrev</code>就是当前<code>k+1</code>，否则就是<code>k-1</code>，那么如何判断是否向下走呢。</p><figure><img src="https://pic2.imgdb.cn/item/644a5f020d2dde5777cea850.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们拿这个举例子，假设<code>d = 1</code>,那么当前的<code>k = -1 || k = 1</code>，如果<code>k = -1</code>，显而易见的，k不可能从-2变成-1，也就是说当<code>k = -d</code>时，只可能是由起始坐标向y轴走一步，同理<code>k = d</code>时，只可能是起始坐标向x轴方向走一步。那么当<code>k !== d || k !== -d</code>时，由前一轮的坐标而定。</p><p>例如当<code>d = 2, k = 0</code>时，我们获取<code>d = 1, k = -1,k = 1</code>的x坐标，发现<code>k = 1</code>的x坐标大于<code>k = -1</code>时的x坐标，根据优先删除原则，我们选择<code>k = 1</code>的坐标作为起始坐标。</p><p>然而当<code>d = 3, k = -1时</code>，我们获取<code> d = 2, k = 0, k = 1</code>的坐标，我们发现<code>k = 0</code>的x坐标等于<code>k = 1</code>时的x坐标，这是为什么。一般来说k值越小，代表在y轴上偏移的越远，于此同时在x轴上就走的相对近，然而他们的x坐标却想等，只有一种可能，那就是<code>k = 0</code>，时，那一步额外走了<code>斜线</code>，走斜线的时候k值保持不变，但会在x轴与y轴更接近最终的坐标，所以我们选择<code>k = 0</code>，向上走。</p><figure><img src="https://pic2.imgdb.cn/item/644a5f180d2dde5777cedd02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个时候，我们的代码就变成了这样。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">V</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>k<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Vs</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>d<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">V</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">diff</span> <span class="token operator">=</span> <span class="token punctuation">(</span>from<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> from<span class="token punctuation">.</span>length
  	<span class="token keyword">const</span> m <span class="token operator">=</span> to<span class="token punctuation">.</span>length
    <span class="token keyword">const</span> v<span class="token operator">:</span> <span class="token constant">V</span>  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// v[k] = x</span>

    v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">const</span> vs<span class="token operator">:</span> Vs <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token number">0</span><span class="token operator">:</span> v
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token operator">-</span>d<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> isDown <span class="token operator">=</span> k <span class="token operator">==</span> <span class="token operator">-</span>d <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> d <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
				<span class="token keyword">const</span> kPrev <span class="token operator">=</span> isDown <span class="token operator">?</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> k <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">const</span> xStart <span class="token operator">=</span> v<span class="token punctuation">[</span>kPrev<span class="token punctuation">]</span>
      	<span class="token keyword">const</span> yStart <span class="token operator">=</span> xStart <span class="token operator">-</span> kPrev
        
        <span class="token keyword">const</span> xEnd <span class="token operator">=</span> isDown <span class="token operator">?</span> xStart <span class="token operator">:</span> xStart <span class="token operator">+</span> <span class="token number">1</span>
      	<span class="token keyword">const</span> yEnd <span class="token operator">=</span> isDown <span class="token operator">?</span> yStart <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> yStart
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这一步走完了吗？当然没有，因为我们可以走斜线。假使当前坐标的<code>x + 1</code>对应的值等于<code>y + 1</code>对应的值，我们就可以走斜线。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token operator">-</span>d<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isDown <span class="token operator">=</span> k <span class="token operator">==</span> <span class="token operator">-</span>d <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> d <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> kPrev <span class="token operator">=</span> isDown <span class="token operator">?</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> k <span class="token operator">-</span> <span class="token number">1</span>
 	<span class="token keyword">const</span> xStart <span class="token operator">=</span> v<span class="token punctuation">[</span>kPrev<span class="token punctuation">]</span>
  <span class="token keyword">const</span> yStart <span class="token operator">=</span> xStart <span class="token operator">-</span> kPrev

  <span class="token keyword">const</span> xMid <span class="token operator">=</span> isDown <span class="token operator">?</span> xStart <span class="token operator">:</span> xStart <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token keyword">const</span> yMid <span class="token operator">=</span> isDown <span class="token operator">?</span> yStart <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> yStart

  <span class="token keyword">let</span> xEnd <span class="token operator">=</span> xMid
  <span class="token keyword">let</span> yEnd <span class="token operator">=</span> yMid
  <span class="token comment">// move diagonally</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>xEnd <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> yEnd <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> from<span class="token punctuation">[</span>xEnd<span class="token punctuation">]</span> <span class="token operator">===</span> to<span class="token punctuation">[</span>yEnd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xEnd<span class="token operator">++</span>
    yEnd<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  v<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> xEnd
  tmpV<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> xEnd
  <span class="token comment">// reach to end</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xEnd <span class="token operator">&gt;=</span> n <span class="token operator">&amp;&amp;</span> yEnd <span class="token operator">&gt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// back to start point</span>
    vs<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> tmpV
    <span class="token keyword">const</span> snakes <span class="token operator">=</span> <span class="token function">recall</span><span class="token punctuation">(</span>vs<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，没走完一轮，我们就将当前<code>d</code>可以到达的所有坐标保存到<code>Vs</code>中，以供下一次使用，而如果当前的<code>xEnd &gt;= n &amp;&amp; yEnd &gt;= m)</code>，那么就意味着到达了终点，结束了循环。这样，我们就取得了到达终点所需要最少的步数<code>d</code>以及到达终点所需的所有坐标<code>Vs</code>，我们就可以通过这些信息回溯到原点，收集所有的坐标，最后形成一个坐标的集合<code>snake</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 从终点到起点，记录每一个节点</span>
<span class="token keyword">const</span> <span class="token function-variable function">recall</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vs<span class="token operator">:</span> Vs<span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> m<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> snakes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> n<span class="token punctuation">,</span> y<span class="token operator">:</span> m<span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> d<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vPrev <span class="token operator">=</span> vs<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> k <span class="token operator">=</span> point<span class="token punctuation">.</span>x <span class="token operator">-</span> point<span class="token punctuation">.</span>y
    <span class="token keyword">const</span> isDown <span class="token operator">=</span> k <span class="token operator">==</span> <span class="token operator">-</span>i <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> i <span class="token operator">&amp;&amp;</span> vPrev<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> vPrev<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> kPrev <span class="token operator">=</span> isDown <span class="token operator">?</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> k <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">const</span> xEnd <span class="token operator">=</span> point<span class="token punctuation">.</span>x
    <span class="token keyword">const</span> yEnd <span class="token operator">=</span> point<span class="token punctuation">.</span>y

    <span class="token keyword">const</span> xStart <span class="token operator">=</span> vPrev<span class="token punctuation">[</span>kPrev<span class="token punctuation">]</span>
    <span class="token keyword">const</span> yStart <span class="token operator">=</span> xStart <span class="token operator">-</span> kPrev

    snakes<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      xStart<span class="token punctuation">,</span>
      yStart<span class="token punctuation">,</span>
      isDown<span class="token punctuation">,</span>
      xEnd<span class="token punctuation">,</span>
      yEnd<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    point<span class="token punctuation">.</span>x <span class="token operator">=</span> xStart
    point<span class="token punctuation">.</span>y <span class="token operator">=</span> yStart
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> snakes
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51);function m(b,f){const e=i("ExternalLinkIcon");return t(),o("div",null,[d,s("p",null,[r,n("的算法就是一种能达到上面这些目的的算法，他可以用来找出"),k,n("，这是算法的"),s("a",u,[n("论文地址"),c(e)]),n("。")]),v])}const h=p(l,[["render",m],["__file","myers-diff.html.vue"]]);export{h as default};
