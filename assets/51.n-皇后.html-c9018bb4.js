import{_ as n,X as s,Y as a,a1 as t}from"./framework-23afdf50.js";const p={},o=t(`<h3 id="题目-51-n-皇后" tabindex="-1"><a class="header-anchor" href="#题目-51-n-皇后" aria-hidden="true">#</a> 题目: 51.n-皇后</h3><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 &#39;Q&#39; 和 &#39;.&#39; 分别代表了皇后和空位。</p><div class="language-card line-numbers-mode" data-ext="card"><pre class="language-card"><code>示例1
输入：n = 4
输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-card line-numbers-mode" data-ext="card"><pre class="language-card"><code>示例2
输入：n = 4
输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>这道题可以用回溯的思想去解决，由这道题目可以想到，在 N 个格子中放 N 个皇后，其实就是每一行只能放一个皇后，所以我们可以遍历每一列，尝试放置皇后。</p><p>我们可以先定义一个递归函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">recurse</span> <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其参数为 list: 已经放置的行，比如<code>Q...</code>代表的是 4X4 的棋盘中放置了一行，皇后在第一个格子 map: 已放置的坐标 &lt;x,y&gt; x 为列，y 为行。</p><p>接下来就是在合适的时候进行递归与回溯。</p><p>假如 list 的长度为 n，那么当前已经满足题目的条件，我们就将 list 放入到结果中。</p><p>假如不满足条件，那么我们当前的行数为 y: <code>list.length</code>。</p><p>在当前 y 坐标下，我们要对每一列 x 进行判断，判断当前坐标&lt;x,y&gt;能否放置一枚皇后。</p><p>因为我们的 map 保存了之前存放的皇后坐标，此时我们可以根据之前保存的坐标进行判断，假如 x 坐标与之前的重合，那么就处在同一竖直线上。</p><p>另外还需要判断斜线，斜线就是简单的一次函数，假如当前坐标 x+y 等于之前保存的任意坐标的 mapX+mapY，或者当前坐标的 y-x 等于 mapY-mapX,那么就是在斜线上有重合</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">recurse</span> <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> currentX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> currentX <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> currentX<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 直线</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>currentX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> k1 <span class="token operator">=</span> currentX <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token keyword">const</span> k2 <span class="token operator">=</span> y <span class="token operator">-</span> currentX<span class="token punctuation">;</span>
    <span class="token comment">// 判断斜线</span>
    <span class="token keyword">let</span> hasDiagonal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>mapX<span class="token punctuation">,</span> mapY<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mapX <span class="token operator">+</span> mapY <span class="token operator">===</span> k1 <span class="token operator">||</span> mapY <span class="token operator">-</span> mapX <span class="token operator">===</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hasDiagonal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDiagonal<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token comment">// 命中</span>
    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token string">&quot;.&quot;</span>
        <span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>currentX<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;Q&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>n <span class="token operator">-</span> currentX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentX<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">recurse</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回退</span>
    list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>currentX<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解题代码" tabindex="-1"><a class="header-anchor" href="#解题代码" aria-hidden="true">#</a> 解题代码</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/*
 * @lc app=leetcode.cn id=51 lang=typescript
 *
 * [51] N 皇后
 */</span>

<span class="token comment">// @lc code=start</span>
<span class="token keyword">function</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">recurse</span> <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> y <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> currentX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> currentX <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> currentX<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>currentX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token comment">// 斜线</span>
      <span class="token comment">// 满足条件</span>
      <span class="token keyword">const</span> k1 <span class="token operator">=</span> currentX <span class="token operator">+</span> y<span class="token punctuation">;</span>
      <span class="token keyword">const</span> k2 <span class="token operator">=</span> y <span class="token operator">-</span> currentX<span class="token punctuation">;</span>
      <span class="token keyword">let</span> hasDiagonal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>mapX<span class="token punctuation">,</span> mapY<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mapX <span class="token operator">+</span> mapY <span class="token operator">===</span> k1 <span class="token operator">||</span> mapY <span class="token operator">-</span> mapX <span class="token operator">===</span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          hasDiagonal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDiagonal<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

      list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token string">&quot;.&quot;</span>
          <span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>currentX<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;Q&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>n <span class="token operator">-</span> currentX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentX<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">recurse</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
      list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>currentX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">recurse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// @lc code=end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),e=[o];function c(u,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","51.n-皇后.html.vue"]]);export{k as default};
